// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/recording.dart';
import 'models/song.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5969070515578768651),
    name: 'Song',
    lastPropertyId: const obx_int.IdUid(15, 4096660109682434021),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7777712554290028812),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7382963189063421679),
        name: 'uuid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5160238900587132615),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 281789604092416390),
        name: 'artist',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5320435368832947210),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 325425649095234913),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3775760290885119452),
        name: 'vocalPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8097596465907649802),
        name: 'instrumentalPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 9171824363583071595),
        name: 'imagePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3106750912937181462),
        name: 'lyrics',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2118681879876864983),
        name: 'amplitude',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6742437294136687482),
        name: 'timestampLyrics',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 7623219558415690993),
        name: 'storagePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 4160443898181292771),
        name: 'createdDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 4096660109682434021),
        name: 'recentDate',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'recordings',
        srcEntity: 'Recording',
        srcField: 'song',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8825714124383623825),
    name: 'Recording',
    lastPropertyId: const obx_int.IdUid(9, 5294576346794238653),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4516320311044506146),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1971440584359084555),
        name: 'path',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8044186050612755017),
        name: 'start',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2501550870464946231),
        name: 'end',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 817902347467312485),
        name: 'songId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 1173800041027082414),
        relationTarget: 'Song',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3675262838112871038),
        name: 'clipedPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4176819854345783129),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4752185688355954915),
        name: 'createdDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5294576346794238653),
        name: 'durationMs',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 8825714124383623825),
    lastIndexId: const obx_int.IdUid(1, 1173800041027082414),
    lastRelationId: const obx_int.IdUid(1, 8442640223663294379),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [8442640223663294379],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Song: obx_int.EntityDefinition<Song>(
      model: _entities[0],
      toOneRelations: (Song object) => [],
      toManyRelations: (Song object) => {
        obx_int.RelInfo<Recording>.toOneBacklink(
          5,
          object.id,
          (Recording srcObject) => srcObject.song,
        ): object.recordings,
      },
      getId: (Song object) => object.id,
      setId: (Song object, int id) {
        object.id = id;
      },
      objectToFB: (Song object, fb.Builder fbb) {
        final uuidOffset = fbb.writeString(object.uuid);
        final titleOffset = fbb.writeString(object.title);
        final artistOffset = fbb.writeString(object.artist);
        final filePathOffset = fbb.writeString(object.filePath);
        final vocalPathOffset = fbb.writeString(object.vocalPath);
        final instrumentalPathOffset = fbb.writeString(object.instrumentalPath);
        final imagePathOffset = fbb.writeString(object.imagePath);
        final lyricsOffset = fbb.writeString(object.lyrics);
        final amplitudeOffset = fbb.writeString(object.amplitude);
        final timestampLyricsOffset = fbb.writeString(object.timestampLyrics);
        final storagePathOffset = fbb.writeString(object.storagePath);
        fbb.startTable(16);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, uuidOffset);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, artistOffset);
        fbb.addInt64(4, object.duration);
        fbb.addOffset(5, filePathOffset);
        fbb.addOffset(6, vocalPathOffset);
        fbb.addOffset(7, instrumentalPathOffset);
        fbb.addOffset(8, imagePathOffset);
        fbb.addOffset(9, lyricsOffset);
        fbb.addOffset(10, amplitudeOffset);
        fbb.addOffset(11, timestampLyricsOffset);
        fbb.addOffset(12, storagePathOffset);
        fbb.addInt64(13, object.createdDate.millisecondsSinceEpoch);
        fbb.addInt64(14, object.recentDate.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final artistParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final durationParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final imagePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final lyricsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final amplitudeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final timestampLyricsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final vocalPathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final instrumentalPathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final storagePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final createdDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0),
        );
        final recentDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0),
        );
        final object = Song(
          id: idParam,
          uuid: uuidParam,
          title: titleParam,
          artist: artistParam,
          duration: durationParam,
          filePath: filePathParam,
          imagePath: imagePathParam,
          lyrics: lyricsParam,
          amplitude: amplitudeParam,
          timestampLyrics: timestampLyricsParam,
          vocalPath: vocalPathParam,
          instrumentalPath: instrumentalPathParam,
          storagePath: storagePathParam,
          createdDate: createdDateParam,
          recentDate: recentDateParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Song>(
          object.recordings,
          store,
          obx_int.RelInfo<Recording>.toOneBacklink(
            5,
            object.id,
            (Recording srcObject) => srcObject.song,
          ),
        );
        return object;
      },
    ),
    Recording: obx_int.EntityDefinition<Recording>(
      model: _entities[1],
      toOneRelations: (Recording object) => [object.song],
      toManyRelations: (Recording object) => {},
      getId: (Recording object) => object.id,
      setId: (Recording object, int id) {
        object.id = id;
      },
      objectToFB: (Recording object, fb.Builder fbb) {
        final pathOffset = fbb.writeString(object.path);
        final clipedPathOffset = fbb.writeString(object.clipedPath);
        final titleOffset = fbb.writeString(object.title);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, pathOffset);
        fbb.addInt64(2, object.start);
        fbb.addInt64(3, object.end);
        fbb.addInt64(4, object.song.targetId);
        fbb.addOffset(5, clipedPathOffset);
        fbb.addOffset(6, titleOffset);
        fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
        fbb.addInt64(8, object.durationMs);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final pathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final clipedPathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final startParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final endParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final durationMsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final createdDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = Recording(
          id: idParam,
          title: titleParam,
          path: pathParam,
          clipedPath: clipedPathParam,
          start: startParam,
          end: endParam,
          durationMs: durationMsParam,
          createdDate: createdDateParam,
        );
        object.song.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.song.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[0].properties[0]);

  /// See [Song.uuid].
  static final uuid = obx.QueryStringProperty<Song>(_entities[0].properties[1]);

  /// See [Song.title].
  static final title = obx.QueryStringProperty<Song>(
    _entities[0].properties[2],
  );

  /// See [Song.artist].
  static final artist = obx.QueryStringProperty<Song>(
    _entities[0].properties[3],
  );

  /// See [Song.duration].
  static final duration = obx.QueryIntegerProperty<Song>(
    _entities[0].properties[4],
  );

  /// See [Song.filePath].
  static final filePath = obx.QueryStringProperty<Song>(
    _entities[0].properties[5],
  );

  /// See [Song.vocalPath].
  static final vocalPath = obx.QueryStringProperty<Song>(
    _entities[0].properties[6],
  );

  /// See [Song.instrumentalPath].
  static final instrumentalPath = obx.QueryStringProperty<Song>(
    _entities[0].properties[7],
  );

  /// See [Song.imagePath].
  static final imagePath = obx.QueryStringProperty<Song>(
    _entities[0].properties[8],
  );

  /// See [Song.lyrics].
  static final lyrics = obx.QueryStringProperty<Song>(
    _entities[0].properties[9],
  );

  /// See [Song.amplitude].
  static final amplitude = obx.QueryStringProperty<Song>(
    _entities[0].properties[10],
  );

  /// See [Song.timestampLyrics].
  static final timestampLyrics = obx.QueryStringProperty<Song>(
    _entities[0].properties[11],
  );

  /// See [Song.storagePath].
  static final storagePath = obx.QueryStringProperty<Song>(
    _entities[0].properties[12],
  );

  /// See [Song.createdDate].
  static final createdDate = obx.QueryDateProperty<Song>(
    _entities[0].properties[13],
  );

  /// See [Song.recentDate].
  static final recentDate = obx.QueryDateProperty<Song>(
    _entities[0].properties[14],
  );

  /// see [Song.recordings]
  static final recordings = obx.QueryBacklinkToMany<Recording, Song>(
    Recording_.song,
  );
}

/// [Recording] entity fields to define ObjectBox queries.
class Recording_ {
  /// See [Recording.id].
  static final id = obx.QueryIntegerProperty<Recording>(
    _entities[1].properties[0],
  );

  /// See [Recording.path].
  static final path = obx.QueryStringProperty<Recording>(
    _entities[1].properties[1],
  );

  /// See [Recording.start].
  static final start = obx.QueryIntegerProperty<Recording>(
    _entities[1].properties[2],
  );

  /// See [Recording.end].
  static final end = obx.QueryIntegerProperty<Recording>(
    _entities[1].properties[3],
  );

  /// See [Recording.song].
  static final song = obx.QueryRelationToOne<Recording, Song>(
    _entities[1].properties[4],
  );

  /// See [Recording.clipedPath].
  static final clipedPath = obx.QueryStringProperty<Recording>(
    _entities[1].properties[5],
  );

  /// See [Recording.title].
  static final title = obx.QueryStringProperty<Recording>(
    _entities[1].properties[6],
  );

  /// See [Recording.createdDate].
  static final createdDate = obx.QueryDateProperty<Recording>(
    _entities[1].properties[7],
  );

  /// See [Recording.durationMs].
  static final durationMs = obx.QueryIntegerProperty<Recording>(
    _entities[1].properties[8],
  );
}
